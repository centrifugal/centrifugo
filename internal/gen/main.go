package main

import (
	"bytes"
	"os"
	"reflect"
	"strings"
	"text/template"

	pb "github.com/centrifugal/centrifugo/v4/internal/apiproto"

	"google.golang.org/protobuf/proto"
)

var messages = []proto.Message{
	&pb.BatchRequest{},
	&pb.PublishRequest{},
	&pb.BroadcastRequest{},
	&pb.SubscribeRequest{},
	&pb.UnsubscribeRequest{},
	&pb.DisconnectRequest{},
	&pb.PresenceRequest{},
	&pb.PresenceStatsRequest{},
	&pb.HistoryRequest{},
	&pb.HistoryRemoveRequest{},
	&pb.InfoRequest{},
	&pb.RPCRequest{},
	&pb.RefreshRequest{},
	&pb.ChannelsRequest{},
}

var header = `// Code generated by internal/gen/main.go. DO NOT EDIT.

package api

import (
	"io"
	"net/http"
)
`

var templateFunc = `
func (s *Handler) handle{{ .MethodNameCapitalized }}(w http.ResponseWriter, r *http.Request) {
	data, err := io.ReadAll(r.Body)
	if err != nil {
		s.handleReadDataError(r, w, err)
		return
	}

	req, err := paramsDecoder.Decode{{ .MethodNameCapitalized }}(data)
	if err != nil {
		s.handleUnmarshalError(r, w, err)
		return
	}

	data, err = responseEncoder.Encode{{ .MethodNameCapitalized }}(s.api.{{ .MethodNameCapitalized }}(r.Context(), req))
	if err != nil {
		s.handleMarshalError(r, w, err)
		return
	}

	s.writeJson(w, data)
}
`

type TemplateData struct {
	RequestName           string
	MethodNameCapitalized string
	MethodNameLower       string
}

func main() {
	tmpl := template.Must(template.New("").Parse(templateFunc))

	var buf bytes.Buffer
	buf.WriteString(header)

	for _, msg := range messages {
		t := reflect.TypeOf(msg).Elem()
		err := tmpl.Execute(&buf, TemplateData{
			RequestName:           t.Name(),
			MethodNameCapitalized: strings.TrimSuffix(t.Name(), "Request"),
			MethodNameLower:       strings.ToLower(strings.TrimSuffix(t.Name(), "Request")),
		})
		if err != nil {
			panic(err)
		}
	}

	file, err := os.Create("internal/api/handler_gen.go")
	if err != nil {
		panic(err)
	}
	defer func() {
		_ = file.Close()
	}()
	_, _ = buf.WriteTo(file)
}

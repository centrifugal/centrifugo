package main

import (
	"bytes"
	"os"
	"strings"
	"text/template"
)

var requests = []string{
	"Batch",
	"Publish",
	"Broadcast",
	"Subscribe",
	"Unsubscribe",
	"Disconnect",
	"Presence",
	"PresenceStats",
	"History",
	"HistoryRemove",
	"Info",
	"RPC",
	"Refresh",
	"Channels",
}

var header = `// Code generated by internal/gen/api_handlers/main.go. DO NOT EDIT.

package api

import (
	"io"
	"net/http"
)
`

var templateFunc = `
func (s *Handler) handle{{ .RequestCapitalized }}(w http.ResponseWriter, r *http.Request) {
	data, err := io.ReadAll(r.Body)
	if err != nil {
		s.handleReadDataError(r, w, err)
		return
	}

	req, err := paramsDecoder.Decode{{ .RequestCapitalized }}(data)
	if err != nil {
		s.handleUnmarshalError(r, w, err)
		return
	}

	data, err = responseEncoder.Encode{{ .RequestCapitalized }}(s.api.{{ .RequestCapitalized }}(r.Context(), req))
	if err != nil {
		s.handleMarshalError(r, w, err)
		return
	}

	s.writeJson(w, data)
}
`

type TemplateData struct {
	RequestCapitalized string
	RequestLower       string
}

func main() {
	tmpl := template.Must(template.New("").Parse(templateFunc))

	var buf bytes.Buffer
	buf.WriteString(header)

	for _, req := range requests {
		err := tmpl.Execute(&buf, TemplateData{
			RequestCapitalized: req,
			RequestLower:       strings.ToLower(req),
		})
		if err != nil {
			panic(err)
		}
	}

	file, err := os.Create("internal/api/handler_gen.go")
	if err != nil {
		panic(err)
	}
	defer func() {
		_ = file.Close()
	}()
	_, _ = buf.WriteTo(file)
}

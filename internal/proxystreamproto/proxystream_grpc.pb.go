// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proxystreamproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CentrifugoProxyStreamClient is the client API for CentrifugoProxyStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentrifugoProxyStreamClient interface {
	// ConnectUnidirectional allows handling unidirectional connections.
	ConnectUnidirectional(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (CentrifugoProxyStream_ConnectUnidirectionalClient, error)
	// ConnectBidirectional allows handling bidirectional connections.
	ConnectBidirectional(ctx context.Context, opts ...grpc.CallOption) (CentrifugoProxyStream_ConnectBidirectionalClient, error)
	// SubscribeUnidirectional allows handling unidirectional subscription streams.
	SubscribeUnidirectional(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CentrifugoProxyStream_SubscribeUnidirectionalClient, error)
	// SubscribeBidirectional allows handling bidirectional subscription streams.
	SubscribeBidirectional(ctx context.Context, opts ...grpc.CallOption) (CentrifugoProxyStream_SubscribeBidirectionalClient, error)
}

type centrifugoProxyStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewCentrifugoProxyStreamClient(cc grpc.ClientConnInterface) CentrifugoProxyStreamClient {
	return &centrifugoProxyStreamClient{cc}
}

func (c *centrifugoProxyStreamClient) ConnectUnidirectional(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (CentrifugoProxyStream_ConnectUnidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentrifugoProxyStream_ServiceDesc.Streams[0], "/centrifugal.centrifugo.proxystream.CentrifugoProxyStream/ConnectUnidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &centrifugoProxyStreamConnectUnidirectionalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CentrifugoProxyStream_ConnectUnidirectionalClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type centrifugoProxyStreamConnectUnidirectionalClient struct {
	grpc.ClientStream
}

func (x *centrifugoProxyStreamConnectUnidirectionalClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centrifugoProxyStreamClient) ConnectBidirectional(ctx context.Context, opts ...grpc.CallOption) (CentrifugoProxyStream_ConnectBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentrifugoProxyStream_ServiceDesc.Streams[1], "/centrifugal.centrifugo.proxystream.CentrifugoProxyStream/ConnectBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &centrifugoProxyStreamConnectBidirectionalClient{stream}
	return x, nil
}

type CentrifugoProxyStream_ConnectBidirectionalClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type centrifugoProxyStreamConnectBidirectionalClient struct {
	grpc.ClientStream
}

func (x *centrifugoProxyStreamConnectBidirectionalClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centrifugoProxyStreamConnectBidirectionalClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centrifugoProxyStreamClient) SubscribeUnidirectional(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CentrifugoProxyStream_SubscribeUnidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentrifugoProxyStream_ServiceDesc.Streams[2], "/centrifugal.centrifugo.proxystream.CentrifugoProxyStream/SubscribeUnidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &centrifugoProxyStreamSubscribeUnidirectionalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CentrifugoProxyStream_SubscribeUnidirectionalClient interface {
	Recv() (*ChannelResponse, error)
	grpc.ClientStream
}

type centrifugoProxyStreamSubscribeUnidirectionalClient struct {
	grpc.ClientStream
}

func (x *centrifugoProxyStreamSubscribeUnidirectionalClient) Recv() (*ChannelResponse, error) {
	m := new(ChannelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centrifugoProxyStreamClient) SubscribeBidirectional(ctx context.Context, opts ...grpc.CallOption) (CentrifugoProxyStream_SubscribeBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentrifugoProxyStream_ServiceDesc.Streams[3], "/centrifugal.centrifugo.proxystream.CentrifugoProxyStream/SubscribeBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &centrifugoProxyStreamSubscribeBidirectionalClient{stream}
	return x, nil
}

type CentrifugoProxyStream_SubscribeBidirectionalClient interface {
	Send(*ChannelRequest) error
	Recv() (*ChannelResponse, error)
	grpc.ClientStream
}

type centrifugoProxyStreamSubscribeBidirectionalClient struct {
	grpc.ClientStream
}

func (x *centrifugoProxyStreamSubscribeBidirectionalClient) Send(m *ChannelRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centrifugoProxyStreamSubscribeBidirectionalClient) Recv() (*ChannelResponse, error) {
	m := new(ChannelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CentrifugoProxyStreamServer is the server API for CentrifugoProxyStream service.
// All implementations must embed UnimplementedCentrifugoProxyStreamServer
// for forward compatibility
type CentrifugoProxyStreamServer interface {
	// ConnectUnidirectional allows handling unidirectional connections.
	ConnectUnidirectional(*ConnectRequest, CentrifugoProxyStream_ConnectUnidirectionalServer) error
	// ConnectBidirectional allows handling bidirectional connections.
	ConnectBidirectional(CentrifugoProxyStream_ConnectBidirectionalServer) error
	// SubscribeUnidirectional allows handling unidirectional subscription streams.
	SubscribeUnidirectional(*SubscribeRequest, CentrifugoProxyStream_SubscribeUnidirectionalServer) error
	// SubscribeBidirectional allows handling bidirectional subscription streams.
	SubscribeBidirectional(CentrifugoProxyStream_SubscribeBidirectionalServer) error
	mustEmbedUnimplementedCentrifugoProxyStreamServer()
}

// UnimplementedCentrifugoProxyStreamServer must be embedded to have forward compatible implementations.
type UnimplementedCentrifugoProxyStreamServer struct {
}

func (UnimplementedCentrifugoProxyStreamServer) ConnectUnidirectional(*ConnectRequest, CentrifugoProxyStream_ConnectUnidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectUnidirectional not implemented")
}
func (UnimplementedCentrifugoProxyStreamServer) ConnectBidirectional(CentrifugoProxyStream_ConnectBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectBidirectional not implemented")
}
func (UnimplementedCentrifugoProxyStreamServer) SubscribeUnidirectional(*SubscribeRequest, CentrifugoProxyStream_SubscribeUnidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUnidirectional not implemented")
}
func (UnimplementedCentrifugoProxyStreamServer) SubscribeBidirectional(CentrifugoProxyStream_SubscribeBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBidirectional not implemented")
}
func (UnimplementedCentrifugoProxyStreamServer) mustEmbedUnimplementedCentrifugoProxyStreamServer() {}

// UnsafeCentrifugoProxyStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentrifugoProxyStreamServer will
// result in compilation errors.
type UnsafeCentrifugoProxyStreamServer interface {
	mustEmbedUnimplementedCentrifugoProxyStreamServer()
}

func RegisterCentrifugoProxyStreamServer(s grpc.ServiceRegistrar, srv CentrifugoProxyStreamServer) {
	s.RegisterService(&CentrifugoProxyStream_ServiceDesc, srv)
}

func _CentrifugoProxyStream_ConnectUnidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CentrifugoProxyStreamServer).ConnectUnidirectional(m, &centrifugoProxyStreamConnectUnidirectionalServer{stream})
}

type CentrifugoProxyStream_ConnectUnidirectionalServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type centrifugoProxyStreamConnectUnidirectionalServer struct {
	grpc.ServerStream
}

func (x *centrifugoProxyStreamConnectUnidirectionalServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _CentrifugoProxyStream_ConnectBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CentrifugoProxyStreamServer).ConnectBidirectional(&centrifugoProxyStreamConnectBidirectionalServer{stream})
}

type CentrifugoProxyStream_ConnectBidirectionalServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type centrifugoProxyStreamConnectBidirectionalServer struct {
	grpc.ServerStream
}

func (x *centrifugoProxyStreamConnectBidirectionalServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centrifugoProxyStreamConnectBidirectionalServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CentrifugoProxyStream_SubscribeUnidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CentrifugoProxyStreamServer).SubscribeUnidirectional(m, &centrifugoProxyStreamSubscribeUnidirectionalServer{stream})
}

type CentrifugoProxyStream_SubscribeUnidirectionalServer interface {
	Send(*ChannelResponse) error
	grpc.ServerStream
}

type centrifugoProxyStreamSubscribeUnidirectionalServer struct {
	grpc.ServerStream
}

func (x *centrifugoProxyStreamSubscribeUnidirectionalServer) Send(m *ChannelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CentrifugoProxyStream_SubscribeBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CentrifugoProxyStreamServer).SubscribeBidirectional(&centrifugoProxyStreamSubscribeBidirectionalServer{stream})
}

type CentrifugoProxyStream_SubscribeBidirectionalServer interface {
	Send(*ChannelResponse) error
	Recv() (*ChannelRequest, error)
	grpc.ServerStream
}

type centrifugoProxyStreamSubscribeBidirectionalServer struct {
	grpc.ServerStream
}

func (x *centrifugoProxyStreamSubscribeBidirectionalServer) Send(m *ChannelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centrifugoProxyStreamSubscribeBidirectionalServer) Recv() (*ChannelRequest, error) {
	m := new(ChannelRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CentrifugoProxyStream_ServiceDesc is the grpc.ServiceDesc for CentrifugoProxyStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentrifugoProxyStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "centrifugal.centrifugo.proxystream.CentrifugoProxyStream",
	HandlerType: (*CentrifugoProxyStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectUnidirectional",
			Handler:       _CentrifugoProxyStream_ConnectUnidirectional_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConnectBidirectional",
			Handler:       _CentrifugoProxyStream_ConnectBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeUnidirectional",
			Handler:       _CentrifugoProxyStream_SubscribeUnidirectional_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBidirectional",
			Handler:       _CentrifugoProxyStream_SubscribeBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proxystream.proto",
}
